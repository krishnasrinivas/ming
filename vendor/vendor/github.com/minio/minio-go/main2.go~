package minio

import (
	"fmt"
	"io/ioutil"
	"log"

	"os"

	"github.com/minio/cli"
)

var debugClient *Client

// Debug - entry.
func Debug() {
	app := cli.NewApp()
	app.Usage = "Minio debugger"
	app.Author = "Minio.io"
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name: "endpoint",
		},
		cli.StringFlag{
			Name: "accesskey",
		},
		cli.StringFlag{
			Name: "secretkey",
		},
		cli.BoolFlag{
			Name: "secure",
		},
	}
	app.Before = debugMain
	app.Commands = []cli.Command{
		{
			Name:  "multipart",
			Usage: "Multipart related operations",
			Subcommands: []cli.Command{
				{
					Name:   "new",
					Usage:  "New multipart upload",
					Action: debugNewMultipart,
					Flags: []cli.Flag{
						cli.StringFlag{
							Name:  "bucket",
							Usage: "Bucket name",
						},
						cli.StringFlag{
							Name:  "object",
							Usage: "Object name",
						},
					},
				},
				{
					Name:   "upload",
					Usage:  "Upload part",
					Action: debugUploadPart,
					Flags: []cli.Flag{
						cli.StringFlag{
							Name:  "bucket",
							Usage: "Bucket name",
						},
						cli.StringFlag{
							Name:  "object",
							Usage: "Object name",
						},
						cli.StringFlag{
							Name: "uploadid",
						},
						cli.IntFlag{
							Name: "number",
						},
						cli.StringFlag{
							Name: "file",
						},
					},
				},
			},
		},
	}
	app.RunAndExitOnError()
}

func debugMain(ctx *cli.Context) error {
	endpoint := ctx.GlobalString("endpoint")
	secure := ctx.GlobalBool("secure")
	accessKey := ctx.GlobalString("accesskey")
	secretKey := ctx.GlobalString("secretkey")
	var err error
	debugClient, err = New(endpoint, accessKey, secretKey, secure)
	return err
}

func debugNewMultipart(ctx *cli.Context) {
	bucketName := ctx.String("bucket")
	objectName := ctx.String("object")
	result, err := debugClient.initiateMultipartUpload(bucketName, objectName, "")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(result.UploadID)
}

func debugUploadPart(ctx *cli.Context) {
	bucketName := ctx.String("bucket")
	objectName := ctx.String("object")
	uploadID := ctx.String("uploadid")
	partNum := ctx.Int("number")
	filePath := ctx.String("file")
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}
	md5sum, sha256sum, partSize, err := debugClient.hashCopy(ioutil.Discard, f)
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.Seek(0, 1)
	if err != nil {
		log.Fatal(err)
	}
	part, err := debugClient.uploadPart(bucketName, objectName, uploadID, f, partNum, md5sum, sha256sum, partSize)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(part)
}
